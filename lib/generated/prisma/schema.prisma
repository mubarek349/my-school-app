generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id        String   @id
  name      String
  passcode  String
  phoneno   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model course {
  id             String           @id
  title          String           @db.Text
  description    String?          @db.Text
  teacherId      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  imageUrl       String?          @db.Text
  teacher        teacher?         @relation(fields: [teacherId], references: [id])
  courseprogress courseprogress[]
  enrollment     enrollment[]
  module         module[]

  @@index([teacherId], map: "course_teacherId_fkey")
}

model courseprogress {
  id          String   @id
  progress    Float    @default(0)
  studentId   String
  courseId    String
  lastUpdated DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  course      course   @relation(fields: [courseId], references: [id], map: "courseProgress_courseId_fkey")
  student     student  @relation(fields: [studentId], references: [id], map: "courseProgress_studentId_fkey")

  @@index([courseId], map: "courseProgress_courseId_fkey")
  @@index([studentId], map: "courseProgress_studentId_fkey")
}

model enrollment {
  id         String   @id
  enrolledAt DateTime @default(now())
  courseId   String
  studentId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  url        String   @db.Text
  course     course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student    student  @relation(fields: [studentId], references: [id])

  @@index([courseId], map: "enrollment_courseId_fkey")
  @@index([studentId], map: "enrollment_studentId_fkey")
}

model exam {
  id          String        @id
  title       String
  moduleId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  module      module        @relation(fields: [moduleId], references: [id])
  examattempt examattempt[]
  question    question[]

  @@index([moduleId], map: "exam_moduleId_fkey")
}

model examattempt {
  id          String   @id
  score       Float
  attemptDate DateTime @default(now())
  studentId   String
  examId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  exam        exam     @relation(fields: [examId], references: [id], map: "examAttempt_examId_fkey")
  student     student  @relation(fields: [studentId], references: [id], map: "examAttempt_studentId_fkey")

  @@index([examId], map: "examAttempt_examId_fkey")
  @@index([studentId], map: "examAttempt_studentId_fkey")
}

model module {
  id             String           @id
  title          String
  content        String           @db.Text
  courseId       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  exam           exam[]
  course         course           @relation(fields: [courseId], references: [id])
  moduleprogress moduleprogress[]

  @@index([courseId], map: "module_courseId_fkey")
}

model moduleprogress {
  id          String   @id
  studentId   String
  moduleId    String
  progress    Float    @default(0)
  lastUpdated DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  module      module   @relation(fields: [moduleId], references: [id], map: "moduleProgress_moduleId_fkey")
  student     student  @relation(fields: [studentId], references: [id], map: "moduleProgress_studentId_fkey")

  @@index([moduleId], map: "moduleProgress_moduleId_fkey")
  @@index([studentId], map: "moduleProgress_studentId_fkey")
}

model question {
  id             String           @id
  questionNo     String
  content        String
  examId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  exam           exam             @relation(fields: [examId], references: [id])
  questionoption questionoption[]

  @@index([examId], map: "question_examId_fkey")
}

model questionoption {
  id         String   @id
  option     String
  content    String
  questionId String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  question   question @relation(fields: [questionId], references: [id], map: "questionOption_questionId_fkey")

  @@index([questionId], map: "questionOption_questionId_fkey")
}

model student {
  id                  String              @id
  studentId           String              @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime
  courseprogress      courseprogress[]
  enrollment          enrollment[]
  examattempt         examattempt[]
  moduleprogress      moduleprogress[]
  wpos_wpdatatable_23 wpos_wpdatatable_23 @relation(fields: [studentId], references: [wdt_ID])
}

model teacher {
  id        String   @id
  name      String
  passcode  String
  phoneno   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  course    course[]
}

model wpos_wpdatatable_23 {
  wdt_ID    String   @id
  name      String
  passcode  String
  phoneno   String   @unique
  status    String
  startdate DateTime @default(now())
  chat_id   String
  student   student?
}
